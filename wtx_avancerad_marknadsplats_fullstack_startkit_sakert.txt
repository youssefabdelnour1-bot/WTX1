# WTX – Avancerad Marknadsplats (Fullstack-startkit, säkert)

> **Obs!** 100% säkerhet mot alla attacker kan ingen garantera. Det här startkitet är dock byggt enligt branschpraxis (OWASP Top 10, säkra defaults, minst möjliga behörigheter) för att ge dig en **mycket säker** grund du kan driftsätta direkt och bygga vidare på.

---

## Struktur

```
wtx/
├─ infra/
│  ├─ docker-compose.yml
│  ├─ nginx.conf
├─ backend/
│  ├─ Dockerfile
│  ├─ package.json
│  ├─ tsconfig.json
│  ├─ .env.example
│  ├─ prisma/
│  │  ├─ schema.prisma
│  └─ src/
│     ├─ index.ts
│     ├─ env.ts
│     ├─ plugins/
│     │  ├─ security.ts
│     │  ├─ prisma.ts
│     │  ├─ auth.ts
│     │  ├─ rateLimit.ts
│     │  └─ storage.ts
│     ├─ utils/
│     │  ├─ crypto.ts
│     │  ├─ validator.ts
│     │  └─ errors.ts
│     ├─ routes/
│     │  ├─ health.ts
│     │  ├─ auth.ts
│     │  ├─ listings.ts
│     │  ├─ orders.ts
│     │  ├─ uploads.ts
│     │  └─ admin.ts
│     ├─ services/
│     │  ├─ listings.ts
│     │  ├─ orders.ts
│     │  └─ payments.ts
│     └─ types/
│        └─ index.d.ts
└─ frontend/
   ├─ Dockerfile
   ├─ package.json
   ├─ next.config.mjs
   ├─ postcss.config.mjs
   ├─ tailwind.config.ts
   ├─ src/
   │  ├─ app/
   │  │  ├─ layout.tsx
   │  │  ├─ page.tsx
   │  │  ├─ login/page.tsx
   │  │  ├─ dashboard/page.tsx
   │  │  ├─ listings/new/page.tsx
   │  │  └─ api.ts
   │  └─ components/
   │     ├─ Navbar.tsx
   │     ├─ ListingCard.tsx
   │     └─ Form.tsx
   └─ .env.example
```

---

## infra/docker-compose.yml
```yaml
version: "3.9"
services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: wtx
      POSTGRES_PASSWORD: wtxpass
      POSTGRES_DB: wtx
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - wtxnet

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - wtxnet

  backend:
    build: ../backend
    restart: unless-stopped
    env_file:
      - ../backend/.env
    depends_on:
      - db
      - redis
    networks:
      - wtxnet

  frontend:
    build: ../frontend
    restart: unless-stopped
    env_file:
      - ../frontend/.env
    depends_on:
      - backend
    networks:
      - wtxnet

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - wtxnet

volumes:
  db_data:

networks:
  wtxnet:
    driver: bridge
```

## infra/nginx.conf
```nginx
worker_processes auto;
events { worker_connections 1024; }
http {
  server {
    listen 80;
    server_name _;

    client_max_body_size 20m; # för bilduppladdningar

    location /api/ {
      proxy_pass http://backend:3001/;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
    }

    location / {
      proxy_pass http://frontend:3000/;
    }
  }
}
```

---

## backend/Dockerfile
```dockerfile
FROM node:20-alpine AS deps
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci --omit=dev

FROM node:20-alpine AS builder
WORKDIR /app
COPY . .
RUN npm ci && npm run build

FROM node:20-alpine
WORKDIR /app
ENV NODE_ENV=production
COPY --from=builder /app .
RUN npm prune --omit=dev
EXPOSE 3001
CMD ["node", "dist/src/index.js"]
```

## backend/package.json
```json
{
  "name": "wtx-backend",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
    "build": "tsc -p .",
    "migrate": "prisma migrate deploy",
    "generate": "prisma generate"
  },
  "dependencies": {
    "@fastify/cors": "^9.0.1",
    "@fastify/helmet": "^12.3.0",
    "@fastify/jwt": "^8.0.1",
    "@fastify/multipart": "^8.3.1",
    "@fastify/rate-limit": "^9.0.0",
    "@fastify/sensible": "^5.6.0",
    "@fastify/static": "^7.0.1",
    "@fastify/swagger": "^9.4.0",
    "@fastify/swagger-ui": "^3.0.0",
    "argon2": "^0.40.1",
    "dotenv": "^16.4.5",
    "fastify": "^4.28.1",
    "fastify-plugin": "^4.5.1",
    "ioredis": "^5.4.1",
    "nanoid": "^5.0.7",
    "pino": "^9.4.0",
    "pino-pretty": "^11.2.2",
    "prisma": "^5.18.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/node": "^20.12.12",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.5.3"
  }
}
```

## backend/tsconfig.json
```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ES2022",
    "moduleResolution": "bundler",
    "outDir": "dist",
    "rootDir": ".",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true
  },
  "include": ["src", "prisma"]
}
```

## backend/.env.example
```
DATABASE_URL="postgresql://wtx:wtxpass@db:5432/wtx?schema=public"
JWT_SECRET="changeme-super-secret-long-random"
REDIS_URL="redis://redis:6379/0"
UPLOAD_DIR="/app/uploads"
STRIPE_SECRET_KEY="sk_test_xxx"
BASE_URL="http://localhost"
```

---

## backend/prisma/schema.prisma
```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  company   String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listings  Listing[]
  orders    Order[]
}

enum Role {
  USER
  ADMIN
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  description String
  priceCents  Int
  currency    String   @default("SEK")
  category    String
  quantity    Int      @default(1)
  location    String
  sellerId    String
  seller      User     @relation(fields: [sellerId], references: [id])
  status      ListingStatus @default(ACTIVE)
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ListingStatus {
  ACTIVE
  SOLD
  ARCHIVED
}

model Image {
  id        String   @id @default(cuid())
  url       String
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model Order {
  id         String   @id @default(cuid())
  buyerId    String
  buyer      User     @relation(fields: [buyerId], references: [id])
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])
  amountCents Int
  currency   String   @default("SEK")
  status     OrderStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
}
```

---

## backend/src/env.ts
```ts
import 'dotenv/config';
import { z } from 'zod';

const EnvSchema = z.object({
  DATABASE_URL: z.string().url(),
  JWT_SECRET: z.string().min(32),
  REDIS_URL: z.string(),
  UPLOAD_DIR: z.string().default('/app/uploads'),
  STRIPE_SECRET_KEY: z.string().optional(),
  BASE_URL: z.string().url().default('http://localhost')
});

export const env = EnvSchema.parse(process.env);
```

## backend/src/utils/crypto.ts
```ts
import argon2 from 'argon2';

export async function hashPassword(password: string) {
  return argon2.hash(password, { type: argon2.argon2id, memoryCost: 19456, timeCost: 2, parallelism: 1 });
}

export async function verifyPassword(hash: string, plain: string) {
  return argon2.verify(hash, plain);
}
```

## backend/src/utils/validator.ts
```ts
import { z } from 'zod';

export const RegisterSchema = z.object({
  email: z.string().email(),
  password: z.string().min(10),
  company: z.string().min(2)
});

export const LoginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(1)
});

export const ListingCreateSchema = z.object({
  title: z.string().min(3).max(100),
  description: z.string().min(5).max(2000),
  priceCents: z.number().int().positive(),
  currency: z.string().default('SEK'),
  category: z.string().min(2).max(50),
  quantity: z.number().int().positive().default(1),
  location: z.string().min(2)
});
```

## backend/src/utils/errors.ts
```ts
export class Forbidden extends Error {}
export class NotFound extends Error {}
```

## backend/src/plugins/security.ts
```ts
import fp from 'fastify-plugin';
import helmet from '@fastify/helmet';
import cors from '@fastify/cors';
import rateLimit from '@fastify/rate-limit';
import sensible from '@fastify/sensible';

export default fp(async (app) => {
  await app.register(helmet, {
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        imgSrc: ["'self'", 'data:'],
        scriptSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        connectSrc: ["'self'"],
        frameAncestors: ["'none'"]
      }
    },
    crossOriginResourcePolicy: { policy: 'same-origin' }
  });

  await app.register(cors, { origin: false }); // bara genom Nginx samma domän
  await app.register(rateLimit, { max: 300, timeWindow: '1 minute' });
  await app.register(sensible);
});
```

## backend/src/plugins/prisma.ts
```ts
import fp from 'fastify-plugin';
import { PrismaClient } from '@prisma/client';

declare module 'fastify' {
  interface FastifyInstance {
    prisma: PrismaClient;
  }
}

export default fp(async (app) => {
  const prisma = new PrismaClient();
  await prisma.$connect();
  app.decorate('prisma', prisma);
  app.addHook('onClose', async () => prisma.$disconnect());
});
```

## backend/src/plugins/auth.ts
```ts
import fp from 'fastify-plugin';
import jwt from '@fastify/jwt';
import { env } from '../env.js';

export default fp(async (app) => {
  app.register(jwt, { secret: env.JWT_SECRET });

  app.decorate('auth', async (request: any, reply: any) => {
    try {
      await request.jwtVerify();
    } catch (err) {
      return reply.unauthorized();
    }
  });
});

declare module 'fastify' {
  interface FastifyInstance {
    auth: any;
  }
}
```

## backend/src/plugins/rateLimit.ts
```ts
// extra per-route limiter om det behövs
```

## backend/src/plugins/storage.ts
```ts
import fp from 'fastify-plugin';
import fs from 'node:fs';
import path from 'node:path';
import { env } from '../env.js';

export default fp(async (app) => {
  const dir = env.UPLOAD_DIR;
  fs.mkdirSync(dir, { recursive: true });
  app.decorate('uploadDir', dir);
});

declare module 'fastify' {
  interface FastifyInstance {
    uploadDir: string;
  }
}
```

## backend/src/routes/health.ts
```ts
import { FastifyInstance } from 'fastify';

export default async function routes(app: FastifyInstance) {
  app.get('/health', async () => ({ status: 'ok' }));
}
```

## backend/src/routes/auth.ts
```ts
import { FastifyInstance } from 'fastify';
import { RegisterSchema, LoginSchema } from '../utils/validator.js';
import { hashPassword, verifyPassword } from '../utils/crypto.js';

export default async function routes(app: FastifyInstance) {
  app.post('/auth/register', {
    schema: { body: RegisterSchema }
  }, async (req: any, reply) => {
    const { email, password, company } = RegisterSchema.parse(req.body);
    const exists = await app.prisma.user.findUnique({ where: { email } });
    if (exists) return reply.conflict('Email upptagen');
    const passwordHash = await hashPassword(password);
    const user = await app.prisma.user.create({ data: { email, password: passwordHash, company } });
    const token = app.jwt.sign({ sub: user.id, role: user.role });
    reply.send({ token });
  });

  app.post('/auth/login', async (req: any, reply) => {
    const { email, password } = LoginSchema.parse(req.body);
    const user = await app.prisma.user.findUnique({ where: { email } });
    if (!user) return reply.unauthorized();
    const ok = await verifyPassword(user.password, password);
    if (!ok) return reply.unauthorized();
    const token = app.jwt.sign({ sub: user.id, role: user.role });
    reply.send({ token });
  });
}
```

## backend/src/services/listings.ts
```ts
import type { PrismaClient } from '@prisma/client';

export async function createListing(prisma: PrismaClient, data: any) {
  return prisma.listing.create({ data });
}

export async function searchListings(prisma: PrismaClient, q?: string, category?: string) {
  return prisma.listing.findMany({
    where: {
      status: 'ACTIVE',
      AND: [
        q ? { OR: [{ title: { contains: q, mode: 'insensitive' } }, { description: { contains: q, mode: 'insensitive' } }] } : {},
        category ? { category } : {}
      ]
    },
    include: { images: true }
  });
}
```

## backend/src/routes/listings.ts
```ts
import { FastifyInstance } from 'fastify';
import { ListingCreateSchema } from '../utils/validator.js';

export default async function routes(app: FastifyInstance) {
  app.get('/listings', async (req, reply) => {
    const { q, category } = (req.query as any) || {};
    const items = await app.prisma.listing.findMany({
      where: {
        status: 'ACTIVE',
        AND: [
          q ? { OR: [{ title: { contains: q, mode: 'insensitive' } }, { description: { contains: q, mode: 'insensitive' } }] } : {},
          category ? { category } : {}
        ]
      },
      include: { images: true },
      orderBy: { createdAt: 'desc' }
    });
    reply.send(items);
  });

  app.post('/listings', { preHandler: [app.auth] }, async (req: any, reply) => {
    const body = ListingCreateSchema.parse(req.body);
    const item = await app.prisma.listing.create({ data: { ...body, sellerId: req.user.sub } });
    reply.code(201).send(item);
  });

  app.get('/listings/:id', async (req: any, reply) => {
    const item = await app.prisma.listing.findUnique({ where: { id: req.params.id }, include: { images: true, seller: true } });
    if (!item) return reply.notFound();
    reply.send(item);
  });
}
```

## backend/src/routes/uploads.ts
```ts
import { FastifyInstance } from 'fastify';
import multipart from '@fastify/multipart';
import fs from 'node:fs';
import path from 'node:path';
import { nanoid } from 'nanoid';

export default async function routes(app: FastifyInstance) {
  await app.register(multipart);

  app.post('/uploads', { preHandler: [app.auth] }, async (req: any, reply) => {
    const mp = await req.file();
    if (!mp) return reply.badRequest('No file');
    if (!mp.mimetype.startsWith('image/')) return reply.badRequest('Only images');
    const id = nanoid();
    const fileName = id + path.extname(mp.filename);
    const filePath = path.join(app.uploadDir, fileName);

    await fs.promises.writeFile(filePath, await mp.toBuffer());
    const url = `/api/static/${fileName}`;
    reply.code(201).send({ url });
  });
}
```

## backend/src/routes/orders.ts
```ts
import { FastifyInstance } from 'fastify';

export default async function routes(app: FastifyInstance) {
  app.post('/orders', { preHandler: [app.auth] }, async (req: any, reply) => {
    const { listingId } = req.body as { listingId: string };
    const listing = await app.prisma.listing.findUnique({ where: { id: listingId } });
    if (!listing) return reply.notFound('Listing');

    const order = await app.prisma.order.create({
      data: {
        listingId,
        buyerId: req.user.sub,
        amountCents: listing.priceCents,
        currency: listing.currency
      }
    });

    // Här skulle Stripe PaymentIntent skapas
    reply.code(201).send(order);
  });
}
```

## backend/src/routes/admin.ts
```ts
import { FastifyInstance } from 'fastify';

function requireAdmin(req: any, reply: any, done: any) {
  if (req.user?.role !== 'ADMIN') return reply.forbidden();
  done();
}

export default async function routes(app: FastifyInstance) {
  app.get('/admin/users', { preHandler: [app.auth, requireAdmin] }, async (req, reply) => {
    const users = await app.prisma.user.findMany({ select: { id: true, email: true, company: true, role: true, createdAt: true } });
    reply.send(users);
  });
}
```

## backend/src/index.ts
```ts
import Fastify from 'fastify';
import pino from 'pino';
import security from './plugins/security.js';
import prisma from './plugins/prisma.js';
import auth from './plugins/auth.js';
import storage from './plugins/storage.js';
import { env } from './env.js';
import swagger from '@fastify/swagger';
import swaggerUI from '@fastify/swagger-ui';
import path from 'node:path';
import fastifyStatic from '@fastify/static';

const app = Fastify({ logger: pino({ transport: { target: 'pino-pretty' } }) });

await app.register(security);
await app.register(prisma);
await app.register(auth);
await app.register(storage);

await app.register(swagger, {
  openapi: {
    info: { title: 'WTX API', version: '1.0.0' },
    components: { securitySchemes: { bearerAuth: { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' } } },
    security: [{ bearerAuth: [] }]
  }
});
await app.register(swaggerUI, { routePrefix: '/docs', uiConfig: { docExpansion: 'list' } });

await app.register(fastifyStatic, { root: env.UPLOAD_DIR, prefix: '/static/' });

await app.register(import('./routes/health.js'));
await app.register(import('./routes/auth.js'), { prefix: '/api' });
await app.register(import('./routes/listings.js'), { prefix: '/api' });
await app.register(import('./routes/uploads.js'), { prefix: '/api' });
await app.register(import('./routes/orders.js'), { prefix: '/api' });
await app.register(import('./routes/admin.js'), { prefix: '/api' });

const port = 3001;
app.listen({ host: '0.0.0.0', port }).then(() => {
  app.log.info(`WTX API på :${port}`);
});
```

---

# FRONTEND (Next.js 14 + Tailwind)

## frontend/Dockerfile
```dockerfile
FROM node:20-alpine AS deps
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci

FROM node:20-alpine AS builder
WORKDIR /app
COPY . .
RUN npm ci && npm run build

FROM node:20-alpine
WORKDIR /app
ENV NODE_ENV=production
COPY --from=builder /app .
EXPOSE 3000
CMD ["npm", "start"]
```

## frontend/package.json
```json
{
  "name": "wtx-frontend",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3000",
    "build": "next build",
    "start": "next start -p 3000"
  },
  "dependencies": {
    "next": "14.2.5",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "axios": "^1.7.2",
    "zustand": "^4.5.4"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.7",
    "typescript": "^5.5.3"
  }
}
```

## frontend/.env.example
```
NEXT_PUBLIC_API_BASE=http://localhost/api
```

## frontend/next.config.mjs
```js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
};
export default nextConfig;
```

## frontend/tailwind.config.ts
```ts
import type { Config } from 'tailwindcss'
export default {
  content: ['./src/**/*.{ts,tsx}'],
  theme: { extend: {} },
  plugins: []
} satisfies Config
```

## frontend/postcss.config.mjs
```js
export default { plugins: { tailwindcss: {}, autoprefixer: {} } }
```

## frontend/src/app/layout.tsx
```tsx
import './globals.css';
import Navbar from '../components/Navbar';

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="sv">
      <body className="min-h-screen bg-gray-50 text-gray-900">
        <Navbar />
        <main className="max-w-5xl mx-auto p-4">{children}</main>
      </body>
    </html>
  );
}
```

## frontend/src/app/page.tsx
```tsx
'use client';
import { useEffect, useState } from 'react';
import axios from 'axios';
import ListingCard from '../components/ListingCard';

export default function Home() {
  const [items, setItems] = useState<any[]>([]);
  useEffect(() => { axios.get('/api/listings').then(r => setItems(r.data)); }, []);
  return (
    <div>
      <h1 className="text-3xl font-bold mb-4">WorldTrade Exchange</h1>
      <p className="mb-6">B2B-marknadsplats för överskottsvaror, restmaterial och utrustning.</p>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {items.map(i => <ListingCard key={i.id} item={i} />)}
      </div>
    </div>
  );
}
```

## frontend/src/app/login/page.tsx
```tsx
'use client';
import { useState } from 'react';
import axios from 'axios';

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  return (
    <div className="max-w-md mx-auto bg-white p-6 rounded-xl shadow">
      <h2 className="text-2xl font-semibold mb-4">Logga in</h2>
      <input className="input" placeholder="E-post" value={email} onChange={e=>setEmail(e.target.value)} />
      <input className="input mt-2" type="password" placeholder="Lösenord" value={password} onChange={e=>setPassword(e.target.value)} />
      <button className="btn mt-4" onClick={async ()=>{
        const r = await axios.post('/api/auth/login', { email, password });
        localStorage.setItem('token', r.data.token);
        location.href = '/dashboard';
      }}>Logga in</button>
    </div>
  )
}
```

## frontend/src/app/dashboard/page.tsx
```tsx
'use client';
import { useEffect, useState } from 'react';
import axios from 'axios';

export default function Dashboard() {
  const [me, setMe] = useState<any>(null);
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) return (location.href = '/login');
    axios.get('/api/listings', { headers: { Authorization: `Bearer ${token}` }})
      .then(()=>setMe({ ok: true }))
      .catch(()=>location.href='/login');
  }, []);
  return (
    <div>
      <h2 className="text-2xl font-semibold mb-2">Ditt konto</h2>
      <p>Välkommen! Lägg upp annonser och hantera beställningar.</p>
    </div>
  );
}
```

## frontend/src/app/listings/new/page.tsx
```tsx
'use client';
import { useState } from 'react';
import axios from 'axios';

export default function NewListing() {
  const [form, setForm] = useState({ title: '', description: '', priceCents: 0, category: '', location: '' });

  return (
    <div className="max-w-lg mx-auto bg-white p-6 rounded-xl shadow">
      <h2 className="text-2xl font-semibold mb-4">Ny annons</h2>
      {['title','description','category','location'].map(k=> (
        <input key={k} className="input mt-2" placeholder={k} value={(form as any)[k]} onChange={e=>setForm({ ...form, [k]: e.target.value })} />
      ))}
      <input className="input mt-2" type="number" placeholder="priceCents" value={form.priceCents} onChange={e=>setForm({ ...form, priceCents: Number(e.target.value) })} />
      <button className="btn mt-4" onClick={async ()=>{
        const token = localStorage.getItem('token');
        await axios.post('/api/listings', form, { headers: { Authorization: `Bearer ${token}` }});
        location.href = '/';
      }}>Publicera</button>
    </div>
  );
}
```

## frontend/src/app/api.ts
```ts
export const apiBase = process.env.NEXT_PUBLIC_API_BASE || '/api';
```

## frontend/src/components/Navbar.tsx
```tsx
import Link from 'next/link';
export default function Navbar(){
  return (
    <nav className="bg-white border-b">
      <div className="max-w-5xl mx-auto p-3 flex gap-4 items-center">
        <Link href="/" className="font-bold">WTX</Link>
        <Link href="/listings/new" className="ml-auto">Lägg upp annons</Link>
        <Link href="/dashboard">Konto</Link>
      </div>
    </nav>
  );
}
```

## frontend/src/components/ListingCard.tsx
```tsx
export default function ListingCard({ item }: any){
  return (
    <div className="bg-white rounded-xl shadow p-4">
      <h3 className="font-semibold text-lg">{item.title}</h3>
      <p className="text-sm text-gray-600 line-clamp-3">{item.description}</p>
      <div className="mt-2 font-bold">{(item.priceCents/100).toFixed(2)} {item.currency}</div>
    </div>
  );
}
```

## frontend/src/app/globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

.input{ @apply w-full border rounded-lg px-3 py-2; }
.btn{ @apply bg-black text-white rounded-lg px-4 py-2 hover:opacity-90; }
```

---

# Kom igång (lokalt & server)

## 1) Förbered miljö
- Installera **Docker Desktop**.
- Klona denna struktur till en mapp `wtx/`.

## 2) Miljöfiler
- Kopiera `backend/.env.example` till `backend/.env` och justera vid behov.
- Kopiera `frontend/.env.example` till `frontend/.env`.

## 3) Initiera databasen
Öppna en terminal i `wtx/backend`:
```bash
npm install
npx prisma generate
```

## 4) Starta allting
Gå till `wtx/infra` och kör:
```bash
docker compose up --build
```

- API: `http://localhost/api/docs` (OpenAPI/Swagger)
- Frontend: `http://localhost/`

## 5) Skapa första användaren
```bash
curl -X POST http://localhost/api/auth/register \
 -H 'Content-Type: application/json' \
 -d '{"email":"admin@wtx.local","password":"SuperSäkertLösen123!","company":"WTX"}'
```

## 6) Publicera annons
- Logga in i UI → `Lägg upp annons` → publicera.

---

# Säkerhet – som ingår
- **JWT** med stark hemlighet; 2FA kan läggas till (ex. TOTP) i nästa steg.
- **Argon2id** för lösenord (stark hashning).
- **OWASP-headers** via Helmet + hård CSP.
- **Rate limiting** globalt (kan utökas per endpoint/nyckel).
- **Validering** av alla inputs via **Zod**.
- **Strikt CORS** (endast via Nginx på samma domän).
- **Minsta behörighet** i Prisma + enkel RBAC (USER/ADMIN).
- **Statisk filisolering** för uppladdningar.
- **OpenAPI**-spec för tydlig kontraktstesta.

# Nästa steg / Uppgraderingar
- 2FA (TOTP), sessions-blacklist i Redis.
- Webhookar för betalningar (Stripe) + escrow-flöde.
- Integrera transport-API (Bring/PostNord) för fraktpriser.
- Bildskanning (ClamAV) vid uppladdning.
- Audit log-tabell för alla känsliga operationer.
- E-postverifiering + KYC (Scrive/BankID).
- S3-lagring för bilder (Signed URLs) istället för lokalt.
- Fulltext-sök (PgTrgm) + geosök (PostGIS) för närhet.

---

**Licens**: MIT – använd, ändra och driftsätt fritt.
